import logging
import os
import shutil
import unittest
from datetime import datetime

from watchdog.observers.inotify import InotifyObserver

# Note that to run this test, you must execute:
# `python3 -m tests.main_test`
# from the main directory (where main.py is)
import main
from assets.constants import FILE_FOLDERS, MONTHS
from assets.sorter import Sorter
from tests.constants_for_tests import (SAMPLE_FILES, TEST_FILE_FOLDERS,
                                       TESTS_DIR)

# CONSTANTS
SAMPLE_PATH_1 = os.path.join(TESTS_DIR, "Sample Files")
SAMPLE_PATH_2 = os.path.join(TESTS_DIR, "Sample Files (2)")

TEST_COMMANDS = os.path.join(TESTS_DIR, "test_folders_to_track.txt")


## Unit tests ##
class TestMain(unittest.TestCase):
    @classmethod
    def setUpClass(cls):
        with open(TEST_COMMANDS, "w") as new_commands:
            new_commands.write(
                f"{SAMPLE_PATH_1} file_type\n{SAMPLE_PATH_2} date 2018")

        # Changes where the sample_program object will read commands from
        main.COMMANDS_PATH = TEST_COMMANDS

    @classmethod
    def tearDownClass(cls):
        os.remove(TEST_COMMANDS)

        # Final assert at the end of all tests to make sure both
        # Sample Files folders are back to their original layout
        assert os.listdir(SAMPLE_PATH_1) == SAMPLE_FILES
        assert os.listdir(SAMPLE_PATH_2) == SAMPLE_FILES

    def setUp(self):
        self.sample_program = main.Main()
        self.sample_sorter = Sorter(SAMPLE_PATH_1, "date", 2018)

        self.temp_dir = None
        self.temp_month_dir = None
        self.temp_year_dir = None
        self.temp_path = None
        self.temp_month_path = None
        self.temp_year_path = None
        self.event_handler = None
        self.test_commands = None
        self.test_observer = None

        # Stops test from running if either folder layout is incorrect
        assert os.listdir(SAMPLE_PATH_1) == SAMPLE_FILES
        assert os.listdir(SAMPLE_PATH_2) == SAMPLE_FILES

    def tearDown(self):
        del self.sample_program
        del self.sample_sorter

    # HELPER FUNCTIONS

    def undo_date_sort(self):
        """Undoes folders generated by sort_date function from a Sorter object
        and moves files to their original folder.

        Copied but slightly modified from sorter_test.py.
        """
        for year in self.sample_sorter.years:
            self.temp_year_path = os.path.join(self.sample_sorter.folder, year)
            self.temp_year_dir = os.listdir(self.temp_year_path)

            for month in self.temp_year_dir:
                self.temp_month_path = os.path.join(self.temp_year_path, month)
                self.temp_month_dir = os.listdir(self.temp_month_path)

                # All sample files created in November 2020
                if year == "2020" and month == "(11) Nov":
                    self.temp_dir = self.temp_month_dir

                for item in self.temp_month_dir:
                    shutil.move(
                        os.path.join(self.temp_month_path, item),
                        os.path.join(self.sample_sorter.folder, item),
                    )
                os.rmdir(self.temp_month_path)
            os.rmdir(self.temp_year_path)

    # TESTS

    def test_event_handler_init(self):
        # Note that the event_handler's on_modified method is tested while
        # observers are being tested so only it's constructor method can be
        # tested separately
        self.event_handler = main.CustomEventHandler(self.sample_sorter)

        self.undo_date_sort()
        self.assertEqual(self.temp_dir, SAMPLE_FILES)

    def test_init(self):

        with open(TEST_COMMANDS, "r") as text:
            self.test_commands = [line.split() for line in text.readlines()]

        self.assertEqual(self.sample_program.commands, self.test_commands)

    def test_make_observer(self):
        # Parameters must be the same as for sample_sorter so
        # undo_date_sort functions as normal
        self.test_observer = self.sample_program.make_observer(
            SAMPLE_PATH_1, "date", 2018
        )
        self.sample_sorter.update_years()

        self.undo_date_sort()
        self.assertEqual(self.temp_dir, SAMPLE_FILES)

        self.assertIsInstance(self.test_observer, InotifyObserver)

        self.assertRaises(
            IOError, lambda: self.sample_program.make_observer(
                "./", "date", 2018)
        )
        self.assertRaises(
            IOError,
            lambda: self.sample_program.make_observer(
                SAMPLE_PATH_1, "string", 2018),
        )
        self.assertRaises(
            IOError,
            lambda: self.sample_program.make_observer(
                SAMPLE_PATH_1, "date", "2018"),
        )

    def test_add_observer(self):
        # Parameters must be the same as for sample_sorter so
        # undo_date_sort functions as normal
        self.sample_program.add_observer(SAMPLE_PATH_1, 'date', 2018)
        self.sample_sorter.update_years()
        self.undo_date_sort()
        self.assertEqual(self.temp_dir, SAMPLE_FILES)

        self.sample_program.add_observer(SAMPLE_PATH_2, 'date', 2018)
        # Change path for sample_sorter so undo_date_sort works
        self.sample_sorter.folder = SAMPLE_PATH_2
        self.undo_date_sort()
        self.assertEqual(self.temp_dir, SAMPLE_FILES)

        self.assertEqual(len(self.sample_program.observers), 2)
        self.assertIsInstance(
            self.sample_program.observers[SAMPLE_PATH_1], InotifyObserver)
        self.assertIsInstance(
            self.sample_program.observers[SAMPLE_PATH_2], InotifyObserver)

        # Negative
        for _ in range(100):
            self.sample_program.add_observer(SAMPLE_PATH_1, 'date', 2018)
        self.assertEqual(len(self.sample_program.observers), 2)

    def test_setup_observers(self):
        pass

    def test_run(self):
        pass


if __name__ == "__main__":
    unittest.main()
